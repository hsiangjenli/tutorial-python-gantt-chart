{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for GanttHelper","text":"Source code in <code>2022-python-gantt-chart/gantt_helper.py</code> <pre><code>class GanttHelper:\n\n    def __init__(self, src: str, dir: Union[str, bool]=False, fname: Union[str, bool]=False, sort_by_start: bool=True, x_ticks_num: int=10, fig_size: tuple=(20, 5)) -&gt; None:\n\"\"\"_summary_\n\n        Parameters\n        ----------\n        src : str\n            Toml file name, without filename extension\n        dir : Union[str, bool], optional\n            Ouput file directory, by default False\n        fname : Union[str, bool], optional\n            Ouput file name, by default False\n        sort_by_start : bool, optional\n            Sort data by their start date, by default True\n        x_ticks_num : int, optional\n            How many x ticks you want to display, by default 10\n        fig_size : tuple, optional\n            Figure size, by default (20, 5)\n\n        \"\"\"\n        self.src = src\n        self.dir = dir\n        self.fname = fname\n        self.sort_by_start = sort_by_start\n        self.x_ticks_num = x_ticks_num\n        self.fig_size = fig_size\n\n\n    def plot(self) -&gt; None:\n\"\"\"_summary_\n\n        Example:\n        -------\n        ```python\n        from gantt_helper import GanttHelper\n\n        gh = GanttHelper('gantt', dir='Images', fname='Gannt', sort_by_start=True, x_ticks_num=10, fig_size=(20, 5))\n        gh.plot()\n        ```\n        \"\"\"\n        df, x_ticks_num = self.cleaned_dataframe_data, self.x_ticks_num\n\n        plt.style.use('fivethirtyeight')\n        plt.rcParams['font.sans-serif'] = ['Microsoft JhengHei']\n\n        fig, ax = plt.subplots(1, figsize=self.fig_size)\n\n        ax.barh(df.task, df.current_num, left=df.start_num, color=df.color)\n        ax.barh(df.task, df.start_end, left=df.start_num, color=df.color, alpha=0.5)\n\n        for _, row in df.iterrows():\n            ax.text(row.end_num+df.start_end.max()*0.01, row.uid, f\"{int(row.complete)}%\", va='center')\n\n        step = (df.end_num.max()-df.start_num.min())/x_ticks_num\n\n        ax.set_xticks(np.arange(0, df.end_num.max(), step))\n        ax.set_xticklabels(pd.date_range(df.start.min(), df.end.max(), x_ticks_num).strftime(\"%Y-%m-%d\"), fontsize=10)\n\n        plt.title(f'{self.fname}')\n\n        if self.fname:\n            plt.savefig(self.output_path, bbox_inches='tight')\n\n    @property\n    def output_path(self):\n        if self.dir:\n            os.makedirs(self.dir, exist_ok=True)\n            output_path = f'{self.dir}/{self.fname}.png'\n        else:\n            output_path = f'{self.fname}.png'\n\n        return output_path\n\n    @property\n    def toml_data(self):\n\"\"\"_summary_\n\n        !!! note\n\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n            nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n            massa, nec semper lorem quam in massa.\n\n        Format:\n        -------\n        ```toml\n        [1] \n        task = 'A'\n        start = 2018-06-27\n        end = 2018-06-22\n        complete = 55\n        ```\n        \"\"\"\n        return toml.load(f'{self.src}.toml')\n\n\n    @property\n    def raw_dataframe_data(self):\n        df = pd.DataFrame(self.toml_data.values())\n        if self.sort_by_start:\n            df = df.sort_values(by='start')\n            df = df.reset_index(drop=True)\n\n        return df\n\n\n    @property\n    def cleaned_dataframe_data(self):\n\n        df = self.raw_dataframe_data\n\n        def unique_task_id(x):\n            l = df.task.unique().tolist()\n            return l.index(x)\n\n        df['start_num'] = df.start - df.start.min()\n        df['start_end'] = df.end - df.start\n\n        df['start_num'] = df.start_num.astype('timedelta64[D]').astype(int)\n        df['start_end'] = df.start_end.astype('timedelta64[D]').astype(int)\n\n        df['end_num'] = df.start_num + df.start_end\n\n        df['current_num'] = (df.start_end* df.complete/100)\n        df['color'] = df.complete.apply(GanttHelper.to_color)\n        df['uid'] = df.task.apply(unique_task_id)\n\n        return df\n\n\n    @staticmethod\n    def to_color(x):\n        if x == 100:\n            return (0.3, 0.3, 0.3, 1)\n\n        elif x &lt; 100 and x &gt; 60:\n            return (0, 0.5, 0.3, x/100)\n\n        else:\n            return (0.7, 0, 0, 0.8)\n</code></pre>"},{"location":"#gantt_helper.GanttHelper.toml_data","title":"<code>toml_data</code>  <code>property</code>","text":"<p>summary</p> <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"#gantt_helper.GanttHelper.toml_data--format","title":"Format:","text":"<pre><code>[1] task = 'A'\nstart = 2018-06-27\nend = 2018-06-22\ncomplete = 55\n</code></pre>"},{"location":"#gantt_helper.GanttHelper.__init__","title":"<code>__init__(src, dir=False, fname=False, sort_by_start=True, x_ticks_num=10, fig_size=(20, 5))</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>src</code> <code>str</code> <p>Toml file name, without filename extension</p> required <code>dir</code> <code>Union[str, bool], optional</code> <p>Ouput file directory, by default False</p> <code>False</code> <code>fname</code> <code>Union[str, bool], optional</code> <p>Ouput file name, by default False</p> <code>False</code> <code>sort_by_start</code> <code>bool, optional</code> <p>Sort data by their start date, by default True</p> <code>True</code> <code>x_ticks_num</code> <code>int, optional</code> <p>How many x ticks you want to display, by default 10</p> <code>10</code> <code>fig_size</code> <code>tuple, optional</code> <p>Figure size, by default (20, 5)</p> <code>(20, 5)</code> Source code in <code>2022-python-gantt-chart/gantt_helper.py</code> <pre><code>def __init__(self, src: str, dir: Union[str, bool]=False, fname: Union[str, bool]=False, sort_by_start: bool=True, x_ticks_num: int=10, fig_size: tuple=(20, 5)) -&gt; None:\n\"\"\"_summary_\n\n    Parameters\n    ----------\n    src : str\n        Toml file name, without filename extension\n    dir : Union[str, bool], optional\n        Ouput file directory, by default False\n    fname : Union[str, bool], optional\n        Ouput file name, by default False\n    sort_by_start : bool, optional\n        Sort data by their start date, by default True\n    x_ticks_num : int, optional\n        How many x ticks you want to display, by default 10\n    fig_size : tuple, optional\n        Figure size, by default (20, 5)\n\n    \"\"\"\n    self.src = src\n    self.dir = dir\n    self.fname = fname\n    self.sort_by_start = sort_by_start\n    self.x_ticks_num = x_ticks_num\n    self.fig_size = fig_size\n</code></pre>"},{"location":"#gantt_helper.GanttHelper.plot","title":"<code>plot()</code>","text":"<p>summary</p>"},{"location":"#gantt_helper.GanttHelper.plot--example","title":"Example:","text":"<pre><code>from gantt_helper import GanttHelper\n\ngh = GanttHelper('gantt', dir='Images', fname='Gannt', sort_by_start=True, x_ticks_num=10, fig_size=(20, 5))\ngh.plot()\n</code></pre> Source code in <code>2022-python-gantt-chart/gantt_helper.py</code> <pre><code>def plot(self) -&gt; None:\n\"\"\"_summary_\n\n    Example:\n    -------\n    ```python\n    from gantt_helper import GanttHelper\n\n    gh = GanttHelper('gantt', dir='Images', fname='Gannt', sort_by_start=True, x_ticks_num=10, fig_size=(20, 5))\n    gh.plot()\n    ```\n    \"\"\"\n    df, x_ticks_num = self.cleaned_dataframe_data, self.x_ticks_num\n\n    plt.style.use('fivethirtyeight')\n    plt.rcParams['font.sans-serif'] = ['Microsoft JhengHei']\n\n    fig, ax = plt.subplots(1, figsize=self.fig_size)\n\n    ax.barh(df.task, df.current_num, left=df.start_num, color=df.color)\n    ax.barh(df.task, df.start_end, left=df.start_num, color=df.color, alpha=0.5)\n\n    for _, row in df.iterrows():\n        ax.text(row.end_num+df.start_end.max()*0.01, row.uid, f\"{int(row.complete)}%\", va='center')\n\n    step = (df.end_num.max()-df.start_num.min())/x_ticks_num\n\n    ax.set_xticks(np.arange(0, df.end_num.max(), step))\n    ax.set_xticklabels(pd.date_range(df.start.min(), df.end.max(), x_ticks_num).strftime(\"%Y-%m-%d\"), fontsize=10)\n\n    plt.title(f'{self.fname}')\n\n    if self.fname:\n        plt.savefig(self.output_path, bbox_inches='tight')\n</code></pre>"}]}